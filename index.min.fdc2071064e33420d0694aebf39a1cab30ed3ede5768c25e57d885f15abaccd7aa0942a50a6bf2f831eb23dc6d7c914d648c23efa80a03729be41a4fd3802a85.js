var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/massauth/what-is/",title:"What is MassAuth?",description:"MassAuth Introduction.",content:'\u003cp\u003e\u003cstrong\u003eStoneAssemblies.MassAuth\u003c/strong\u003e is a free, open source distributed, extensible message-based authorization framework built on top of \u003ca href="https://masstransit-project.com/"\u003eMassTransit\u003c/a\u003e. It is a gatekeeper pattern implementation, which also allows you to improve the responsiveness and throughput of your system, from a loosely coupled and a message-driven approach.\u003c/p\u003e\n\u003cp\u003eThe main goal of the \u003ca href="https://docs.microsoft.com/en-us/azure/architecture/patterns/gatekeeper"\u003egatekeeper pattern\u003c/a\u003e is about to\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;Protect applications and services by using a dedicated host instance that acts as a broker between clients and the application or service, validates and sanitizes requests, and passes requests and data between them. This can provide an additional layer of security, and limit the attack surface of the system.\u0026quot;\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n'},{id:1,href:"/docs/massauth/hands-on-lab/",title:"Hands-on Lab",description:"MassAuth Hands-on Lab.",content:'\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eVisual Studio 2019 (16.9.3)\u003c/li\u003e\n\u003cli\u003eDocker (2.3.0.4)\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://cakebuild.net/"\u003eCakeBuild\u003c/a\u003e (1.1.0)\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/dotnet/tye/blob/main/docs/getting_started.md"\u003eTye\u003c/a\u003e (0.9.0-alpha.21380.1)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe final source code of this Hands-on Lab is in the \u003ca href="https://github.com/stoneassemblies/StoneAssemblies.MassAuth.QuickStart"\u003eStoneAssemblies.MassAuth.QuickStart\u003c/a\u003e repository available on GitHub. You can directly clone this repository or just follow the steps outlined below.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="step-1-setup-the-workspace"\u003eStep 1: Setup the workspace\u003c/h2\u003e\n\u003cp\u003eTo setup the workspace, open a \u003cstrong\u003ePowerShell\u003c/strong\u003e console and run the following commands:\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/998e4f86c347c9b9d8da1cae9a2841bf.js"\u003e\u003c/script\u003e\n\u003cp\u003eAfter executing theses commands, a Visual Studio solution file StoneAssemblies.MassAuth.QuickStart.sln is created, which includes the following projects:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProject\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eStoneAssemblies.MassAuth.QuickStart.\u003cstrong\u003eMessages\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eClass library for messages specification.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eStoneAssemblies.MassAuth.QuickStart.\u003cstrong\u003eRules\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eClass library to implement rules for messages.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eStoneAssemblies.MassAuth.QuickStart.\u003cstrong\u003eServices\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eWeb API to host the services that require to be authorized by rules.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eStoneAssemblies.MassAuth.QuickStart.\u003cstrong\u003eAuthServer\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eAuthorization server to host the rules for messages.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe commands also add the required NuGet packages and project references.\u003c/p\u003e\n\u003cp\u003eThe workspace also include two more aditional files. The \u003ccode\u003ebuild.cake\u003c/code\u003e, a cake based build script to ensure the required output and location and the \u003ccode\u003edeployment\\tye\\tye.yaml\u003c/code\u003e that will help us to run and debug the solution.\u003c/p\u003e\n\u003ch2 id="step-2-contract-first"\u003eStep 2: Contract first\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s add a bit of complexity to the generated problem, related with weather forecast. For instance, let\u0026rsquo;s say we will allow to request forecast from a certain date, as some forecasts may not be available due to the complexity of the calculations.\u003c/p\u003e\n\u003cp\u003eFor that purpose, we will add the following class to the \u003cstrong\u003eMessage\u003c/strong\u003e project, to request the weather forecast with start date as argument.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/52e10bdad84c154a35cfd2be104d7333.js"\u003e\u003c/script\u003e\n\u003ch2 id="step-3-implementing-rules"\u003eStep 3: Implementing rules\u003c/h2\u003e\n\u003cp\u003eNow we are ready to implement some rules for the specified message. Continuing with our scenario, let\u0026rsquo;s say the forecast data is only available from today and up to 10 days. This operation could be more complex through query to an external database, but for simplicity it will be implemented as follows in the \u003cstrong\u003eRules\u003c/strong\u003e project.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/6b5d4d0b37c3351cb34ddb2f008a3c76.js"\u003e\u003c/script\u003e\n\u003ch2 id="step-4-implementing-services"\u003eStep 4: Implementing services\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s time to complete the \u003cem\u003eWeatherForecastController\u003c/em\u003e implementation in the \u003cstrong\u003eServices\u003c/strong\u003e project. It should look like this.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/cfde54e975924aaf39ff3d7664b7fdb2.js"\u003e\u003c/script\u003e\n\u003cp\u003eNotice the usage of \u003cem\u003eAuthorizeByRule\u003c/em\u003e attribute on the Get method, to indicate that the input message \u003cem\u003eWeatherForecastRequestMessage\u003c/em\u003e must be processed and validated by the authorization engine before the method execution.\u003c/p\u003e\n\u003cp\u003eWe also have to update the \u003cem\u003eStartup\u003c/em\u003e class implementation.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/86b681686642537c8d945149031a2302.js"\u003e\u003c/script\u003e\n\u003cp\u003eBasically, we add \u003cem\u003eAuthorizeByRuleFilter\u003c/em\u003e as scoped service and ensure the communication through the message broker. Remember, StoneAssemblies.MassAuth is built on top of \u003ca href="https://masstransit-project.com/"\u003eMassTransit\u003c/a\u003e.  Finally, to ensure the configuration via environment variables we must update the \u003cem\u003eProgram\u003c/em\u003e class to this.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/2d6e33f15ee7077577727498a387e8c3.js"\u003e\u003c/script\u003e\n\u003ch2 id="step-5-hosting-rules"\u003eStep 5: Hosting rules\u003c/h2\u003e\n\u003cp\u003eIn order to host rules, we provide a production ready of \u003cem\u003eStoneAssemblies.MassAuth.Server\u003c/em\u003e as docker image available in \u003ca href="https://hub.docker.com/r/stoneassemblies/massauth-server"\u003eDockerHub\u003c/a\u003e. But for debugging or even for customization purpose could be useful build your own rule host server. So, in the \u003cstrong\u003eAuthServer\u003c/strong\u003e project we also have to update the \u003cem\u003eStartup\u003c/em\u003e class implementation.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/6384b11ed441d6efb06950e5e6babdc9.js"\u003e\u003c/script\u003e\n\u003cp\u003eAgain, to ensure the configuration via environment variables the \u003cem\u003eProgram\u003c/em\u003e file must be updated like this.\u003c/p\u003e\n\u003cscript src="https://gist.github.com/alexfdezsauco/9cd40c62c6efba8fc164d73dafe3b117.js"\u003e\u003c/script\u003e\n\u003ch2 id="step-6-build-run-and-test"\u003eStep 6: Build, run and test\u003c/h2\u003e\n\u003cp\u003eIn order to build and run the project, open a \u003cstrong\u003ePowerShell\u003c/strong\u003e terminal in the working directory and run following commands.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-PowerShell"\u003e\u0026gt; dotnet cake\n\u0026gt; cd deployment/tye\n\u0026gt; tye run\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen your browser and navigate to \u003ca href="http://localhost:8000"\u003ehttp://localhost:8000\u003c/a\u003e to display the Tye user interface and ensure that everything is working.\u003c/p\u003e\n\u003cp\u003eOpen a new \u003cstrong\u003ePowerShell\u003c/strong\u003e terminal and try the following commands:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e: Valid request\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-PowerShell"\u003eInvoke-WebRequest http://localhost:6001/WeatherForecast?StartDate=$([System.DateTime]::Now.AddDays(1).Date)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStatusCode        : 200\nStatusDescription : OK\nContent           : [{\u0026quot;date\u0026quot;:\u0026quot;2021-08-24T00:00:00\u0026quot;,\u0026quot;temperatureC\u0026quot;:21,\u0026quot;temperatureF\u0026quot;:69,\u0026quot;summary\u0026quot;:\u0026quot;Chilly\u0026quot;},{\u0026quot;date\u0026quot;:\u0026quot;2021-08-25T00:00:00\u0026quot;,\u0026quot;temperatureC\u0026quot;:4,\u0026quot;tem\n                    peratureF\u0026quot;:39,\u0026quot;summary\u0026quot;:\u0026quot;Chilly\u0026quot;},{\u0026quot;date\u0026quot;:\u0026quot;2021-08-26T00:00:00...\nRawContent        : HTTP/1.1 200 OK\n                    Transfer-Encoding: chunked\n                    Content-Type: application/json; charset=utf-8\n                    Date: Sun, 22 Aug 2021 18:38:21 GMT\n                    Server: Kestrel\n\n                    [{\u0026quot;date\u0026quot;:\u0026quot;2021-08-24T00:00:00\u0026quot;,\u0026quot;temperatureC\u0026quot;:21,\u0026quot;te...\nForms             : {}\nHeaders           : {[Transfer-Encoding, chunked], [Content-Type, application/json; charset=utf-8], [Date, Sun, 22 Aug 2021 18:38:21 GMT], [Server, Kestrel]}\nImages            : {}\nInputFields       : {}\nLinks             : {}\nParsedHtml        : mshtml.HTMLDocumentClass\nRawContentLength  : 435\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e: Out of range request\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-PowerShell"\u003eInvoke-WebRequest http://localhost:6001/WeatherForecast?StartDate=$([System.DateTime]::Now.AddDays(11).Date)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInvoke-WebRequest : The remote server returned an error: (401) Unauthorized.\nAt line:1 char:1\n+ Invoke-WebRequest http://localhost:6001/WeatherForecast?StartDate=$([ ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebException\n    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:2,href:"/docs/stoneassemblies/introduction/",title:"Introduction",description:"Introduction to StoneAssemblies.",content:""},{id:3,href:"/docs/massauth/",title:"MassAuth",description:"MassAuth.",content:""},{id:4,href:"/docs/stoneassemblies/",title:"StoneAssemblies",description:"StoneAssemblies.",content:""},{id:5,href:"/docs/",title:"Docs",description:"Docs StoneAssemblies.",content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()